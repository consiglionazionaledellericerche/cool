<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<import resource="classpath*:fonts.xml" />
	<import resource="classpath*:META-INF/cool-common-rest-context.xml" />
	<import resource="classpath*:META-INF/cool-bulkinfo-context.xml" />


	<!-- Turn on AspectJ @Configurable support. As a result, any time you instantiate
		an object, Spring will attempt to perform dependency injection on that object.
		This occurs for instantiation via the "new" keyword, as well as via reflection.
		This is possible because AspectJ is used to "weave" Roo-based applications
		at compile time. In effect this feature allows dependency injection of any
		object at all in your system, which is a very useful feature (without @Configurable
		you'd only be able to dependency inject objects acquired from Spring or subsequently
		presented to a specific Spring dependency injection method). Roo applications
		use this useful feature in a number of areas, such as @PersistenceContext
		injection into entities. -->
	<context:spring-configured />

	<context:component-scan base-package="it.cnr"/>

	<bean id="baseProxyInterceptor" abstract="true" init-method="register">
		<property name="interceptor">
			<ref bean="proxyInterceptor" />
		</property>
		<property name="cmisService" ref="cmisService" />
	</bean>

</beans>
